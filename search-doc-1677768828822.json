[{"title":"Base64","type":0,"sectionRef":"#","url":"/Silk/api/Base64","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Base64","url":"/Silk/api/Base64#functions","content":" "},{"title":"Decode​","type":1,"pageTitle":"Base64","url":"/Silk/api/Base64#Decode","content":"&lt;/&gt; Base64.Decode( input: string-- Encoded string ) → string-- Decoded data Decode a Base64 encoded string.  "},{"title":"Encode​","type":1,"pageTitle":"Base64","url":"/Silk/api/Base64#Encode","content":"&lt;/&gt; Base64.Encode( input: string-- Data string ) → string-- Base64 encoded data Encode a string to Base64. "},{"title":"CommandRegistry","type":0,"sectionRef":"#","url":"/Silk/api/CommandRegistry","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"CommandRegistry","url":"/Silk/api/CommandRegistry#types","content":" "},{"title":"Command​","type":1,"pageTitle":"CommandRegistry","url":"/Silk/api/CommandRegistry#Command","content":"&lt;/&gt; type Command = { argument: &quot;string&quot; | &quot;number&quot; | &quot;boolean&quot; | &quot;nil&quot;, func: CommandFunction } Represents a command registered to a CommandRegistry  "},{"title":"CommandFunction​","type":1,"pageTitle":"CommandRegistry","url":"/Silk/api/CommandRegistry#CommandFunction","content":"&lt;/&gt; type CommandFunction = ( caller: Dialogue, arg: any? ) → () A function to be called by a command. "},{"title":"Functions​","type":1,"pageTitle":"CommandRegistry","url":"/Silk/api/CommandRegistry#functions","content":" "},{"title":"new​","type":1,"pageTitle":"CommandRegistry","url":"/Silk/api/CommandRegistry#new","content":"constructor &lt;/&gt; CommandRegistry.new( noDefaults: boolean?-- If true, skips registering the default commands. ) → CommandRegistry Creates a new CommandRegistry.  "},{"title":"DeregisterCommand​","type":1,"pageTitle":"CommandRegistry","url":"/Silk/api/CommandRegistry#DeregisterCommand","content":"&lt;/&gt; CommandRegistry:DeregisterCommand( name: string-- The name of the command to remove ) → () Removes a command from this CommandRegistry.  "},{"title":"ExecuteCommand​","type":1,"pageTitle":"CommandRegistry","url":"/Silk/api/CommandRegistry#ExecuteCommand","content":"&lt;/&gt; CommandRegistry:ExecuteCommand( command: string,-- The command to execute, usually from the OnCommand handler. dialogue: Dialogue-- The dialogue the command is being executed by. This is required for commands like stop, and allows you to re-use CommandRegistry instances across different programs. ) → () Parses and executes a command string. caution Will error if the command is not registered!  "},{"title":"RegisterCommand​","type":1,"pageTitle":"CommandRegistry","url":"/Silk/api/CommandRegistry#RegisterCommand","content":"&lt;/&gt; CommandRegistry:RegisterCommand( name: string,-- The name of the command to register command: Command-- The command object to register ) → () Registers a new command to this CommandRegistry. caution Will error if a command with the same name is already registered.  "},{"title":"RegisterDefaults​","type":1,"pageTitle":"CommandRegistry","url":"/Silk/api/CommandRegistry#RegisterDefaults","content":"&lt;/&gt; CommandRegistry:RegisterDefaults() → () Registers the default commands to this CommandRegistry. "},{"title":"Library","type":0,"sectionRef":"#","url":"/Silk/api/Library","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Library","url":"/Silk/api/Library#types","content":" "},{"title":"Function​","type":1,"pageTitle":"Library","url":"/Silk/api/Library#Function","content":"&lt;/&gt; type Function = { argumentCount: number, func: YarnFunction } Represents a function registered to a Library.  "},{"title":"YarnFunction​","type":1,"pageTitle":"Library","url":"/Silk/api/Library#YarnFunction","content":"&lt;/&gt; type YarnFunction = (...Operand?) → Operand A function to be called by a Yarn program. "},{"title":"Properties​","type":1,"pageTitle":"Library","url":"/Silk/api/Library#properties","content":" "},{"title":"functions​","type":1,"pageTitle":"Library","url":"/Silk/api/Library#functions","content":"&lt;/&gt; Library.functions: {[string]: Function} The mapping table of function names to functions. "},{"title":"Functions​","type":1,"pageTitle":"Library","url":"/Silk/api/Library#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Library","url":"/Silk/api/Library#new","content":"constructor &lt;/&gt; Library.new() → Library Creates a new Library.  "},{"title":"DeregisterFunction​","type":1,"pageTitle":"Library","url":"/Silk/api/Library#DeregisterFunction","content":"&lt;/&gt; Library:DeregisterFunction( name: string-- The name fo the function to remove ) → () Removes a function from this Library. If no function with the given name is present in the Library, this method does nothing.  "},{"title":"FunctionExists​","type":1,"pageTitle":"Library","url":"/Silk/api/Library#FunctionExists","content":"&lt;/&gt; Library:FunctionExists( name: string-- The name of the function to check ) → boolean-- Whether the function is registered Returns whether this Library contains a function named name.  "},{"title":"GenerateUniqueVisitedVariableForNode​","type":1,"pageTitle":"Library","url":"/Silk/api/Library#GenerateUniqueVisitedVariableForNode","content":"&lt;/&gt; Library:GenerateUniqueVisitedVariableForNode( name: string-- The name of the node that needs to have a tracking variable created. ) → string-- The new variable name Generates a unique tracking variable name. This is intended to be used to generate names for visting. Ideally these will very reproduceable and sensible. For now it will be something terrible and easy.  "},{"title":"GetFunction​","type":1,"pageTitle":"Library","url":"/Silk/api/Library#GetFunction","content":"&lt;/&gt; Library:GetFunction( name: string-- The name of the function to retrieve. ) → Function-- The named function. Returns the Function with a given name.  "},{"title":"ImportLibrary​","type":1,"pageTitle":"Library","url":"/Silk/api/Library#ImportLibrary","content":"&lt;/&gt; Library:ImportLibrary( other: Library-- The library to import functions from. ) → () Loads functions from another Library. If the other Library contains a function with the same name as one in this library, the function in the other library takes precedence.  "},{"title":"RegisterFunction​","type":1,"pageTitle":"Library","url":"/Silk/api/Library#RegisterFunction","content":"&lt;/&gt; Library:RegisterFunction( name: string,-- The name of the function func: YarnFunction-- The method to be invoked when the function is called ) → () Registers a new function that returns a value, which can be called from a Yarn program.  "},{"title":"RegisterStandardLibrary​","type":1,"pageTitle":"Library","url":"/Silk/api/Library#RegisterStandardLibrary","content":"&lt;/&gt; Library:RegisterStandardLibrary() → () Registers the standard library of functions to this Library. These functions are used for evaluating values within expressions. "},{"title":"RawProgram","type":0,"sectionRef":"#","url":"/Silk/api/RawProgram","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"RawProgram","url":"/Silk/api/RawProgram#types","content":" "},{"title":"Header​","type":1,"pageTitle":"RawProgram","url":"/Silk/api/RawProgram#Header","content":"&lt;/&gt; type Header = { key: string, value: string }   "},{"title":"Instruction​","type":1,"pageTitle":"RawProgram","url":"/Silk/api/RawProgram#Instruction","content":"&lt;/&gt; type Instruction = { opcode: RawProgram.Opcode, operands: {RawProgram.Operand}? }   "},{"title":"Node​","type":1,"pageTitle":"RawProgram","url":"/Silk/api/RawProgram#Node","content":"&lt;/&gt; type Node = { name: string, instructions: {}, labels: {[string]: number}?, tags: {string}?, sourceTextStringId: string?, headers: {RawProgram.Header}? }   "},{"title":"Opcode​","type":1,"pageTitle":"RawProgram","url":"/Silk/api/RawProgram#Opcode","content":"&lt;/&gt; type Opcode = &quot;JUMP_TO&quot; | &quot;JUMP&quot; | &quot;RUN_LINE&quot; | &quot;RUN_COMMAND&quot; | &quot;ADD_OPTION&quot; | &quot;SHOW_OPTIONS&quot; | &quot;PUSH_STRING&quot; | &quot;PUSH_FLOAT&quot; | &quot;PUSH_BOOL&quot; | &quot;PUSH_NULL&quot; | &quot;JUMP_IF_FALSE&quot; | &quot;POP&quot; | &quot;CALL_FUNC&quot; | &quot;PUSH_VARIABLE&quot; | &quot;STORE_VARIABLE&quot; | &quot;STOP&quot; | &quot;RUN_NODE&quot;   "},{"title":"Operand​","type":1,"pageTitle":"RawProgram","url":"/Silk/api/RawProgram#Operand","content":"&lt;/&gt; type Operand = { string_value: string?, bool_value: boolean?, float_value: number? }   "},{"title":"RawProgram​","type":1,"pageTitle":"RawProgram","url":"/Silk/api/RawProgram#RawProgram","content":"&lt;/&gt; type RawProgram = { name: string?, nodes: {[string]: RawProgram.Node}, initial_values: {[string]: RawProgram.Operand} }  "},{"title":"Properties​","type":1,"pageTitle":"RawProgram","url":"/Silk/api/RawProgram#properties","content":" "},{"title":"Opcodes​","type":1,"pageTitle":"RawProgram","url":"/Silk/api/RawProgram#Opcodes","content":"&lt;/&gt; RawProgram.Opcodes: {[Opcode]: number} Opcode name to number lookup "},{"title":"Silk","type":0,"sectionRef":"#","url":"/Silk/api/Silk","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Silk","url":"/Silk/api/Silk#types","content":" "},{"title":"Line​","type":1,"pageTitle":"Silk","url":"/Silk/api/Silk#Line","content":"&lt;/&gt; type Line = Dialogue.Line See full type here.  "},{"title":"Option​","type":1,"pageTitle":"Silk","url":"/Silk/api/Silk#Option","content":"&lt;/&gt; type Option = Dialogue.Option See full type here.  "},{"title":"Program​","type":1,"pageTitle":"Silk","url":"/Silk/api/Silk#Program","content":"&lt;/&gt; type Program = YarnProgram.YarnProgram See full type here.  "},{"title":"RawProgram​","type":1,"pageTitle":"Silk","url":"/Silk/api/Silk#RawProgram","content":"&lt;/&gt; type RawProgram = RawProgram.RawProgram See full type here.  "},{"title":"YarnArgument​","type":1,"pageTitle":"Silk","url":"/Silk/api/Silk#YarnArgument","content":"&lt;/&gt; type YarnArgument = YarnProgram.Operand See full type here.  "},{"title":"YarnFunction​","type":1,"pageTitle":"Silk","url":"/Silk/api/Silk#YarnFunction","content":"&lt;/&gt; type YarnFunction = Library.YarnFunction See full type here. "},{"title":"Properties​","type":1,"pageTitle":"Silk","url":"/Silk/api/Silk#properties","content":" "},{"title":"Base64​","type":1,"pageTitle":"Silk","url":"/Silk/api/Silk#Base64","content":"libraries &lt;/&gt; Silk.Base64: Base64 Base64 library used by generated modules.  "},{"title":"CommandRegistry​","type":1,"pageTitle":"Silk","url":"/Silk/api/Silk#CommandRegistry","content":"libraries &lt;/&gt; Silk.CommandRegistry: CommandRegistry Acts as an organizer for commands and executes command strings from Dialogue.OnCommand  "},{"title":"Dialogue​","type":1,"pageTitle":"Silk","url":"/Silk/api/Silk#Dialogue","content":"libraries &lt;/&gt; Silk.Dialogue: Dialogue Dialogue library used for running a Yarn script.  "},{"title":"VirtualMachine​","type":1,"pageTitle":"Silk","url":"/Silk/api/Silk#VirtualMachine","content":"libraries &lt;/&gt; Silk.VirtualMachine: VirtualMachine Virtual machine library used for executing Yarn instructions.  "},{"title":"Library​","type":1,"pageTitle":"Silk","url":"/Silk/api/Silk#Library","content":"libraries &lt;/&gt; Silk.Library: Library Library used for storing functions bound to a Yarn program. "},{"title":"Functions​","type":1,"pageTitle":"Silk","url":"/Silk/api/Silk#functions","content":" "},{"title":"DecodeProgram​","type":1,"pageTitle":"Silk","url":"/Silk/api/Silk#DecodeProgram","content":"&lt;/&gt; Silk.DecodeProgram( compiled: RawProgram-- Compiled program data ) → ( string?,-- Program name if exists {[string]: YarnProgram.Node},-- Node lookup table {[string]: YarnProgram.Operand}-- Initial values table ) Decode a compiled Yarn program note This method will usually only be used by generated Silk scripts. "},{"title":"Dialogue","type":0,"sectionRef":"#","url":"/Silk/api/Dialogue","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#types","content":" "},{"title":"CommandHandler​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#CommandHandler","content":"handlers &lt;/&gt; type CommandHandler = (text: string) → () Called by the Dialogue whenever a command is executed.  "},{"title":"DialogueCompleteHandler​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#DialogueCompleteHandler","content":"handlers &lt;/&gt; type DialogueCompleteHandler = () → () Called by the Dialogue when the dialogue has reached its end and there is no more code to run.  "},{"title":"LineHandler​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#LineHandler","content":"handlers &lt;/&gt; type LineHandler = (line: Line) → () Called by the Dialogue when it delivers a line to the game.  "},{"title":"NodeCompleteHandler​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#NodeCompleteHandler","content":"handlers &lt;/&gt; type NodeCompleteHandler = (name: string) → () Called by the Dialogue when it reaches the end of a Node.  "},{"title":"NodeStartHandler​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#NodeStartHandler","content":"handlers &lt;/&gt; type NodeStartHandler = (name: string) → () Called by the Dialogue when it begins executing a Node.  "},{"title":"OptionsHandler​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#OptionsHandler","content":"handlers &lt;/&gt; type OptionsHandler = ({Option}) → ()   "},{"title":"PrepareForLinesHandler​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#PrepareForLinesHandler","content":"handlers &lt;/&gt; type PrepareForLinesHandler = (lineIDs: {string}) → () Called by the Dialogue when it anticipates that it will deliver lines. This method should begin preparing to run the lines. For example, if a game delivers dialogue via voice-over, the appropriate audio files should be loaded. caution This method serves to provide a hint to the game that a line may be run. Not every line indicated in lineIDs may end up actually running. This method may be called any number of times during a dialogue session.  "},{"title":"Line​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#Line","content":"&lt;/&gt; type Line = { id: string, substitutions: {string}? } Represents a line of Yarn dialogue. caution When the game receives a Line, it should do the following things to prepare the line for presentation to the user. Use the value in the ID property to look up the appropriate user-facing text in the string table. Use ExpandSubstitutions() to replace all substitutions in the user-facing text. Parse any markup in the line.  "},{"title":"Option​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#Option","content":"&lt;/&gt; type Option = { line: Line, destination: string, enabled: boolean } Represents an option in a Yarn dialogue. The destination property is the node ID to run if the option is selected. "},{"title":"Properties​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#properties","content":" "},{"title":"OnCommand​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#OnCommand","content":"callbacks required &lt;/&gt; Dialogue.OnCommand: CommandHandler? Called when the Dialogue has a command to execute.  "},{"title":"OnDialogueComplete​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#OnDialogueComplete","content":"callbacks &lt;/&gt; Dialogue.OnDialogueComplete: DialogueCompleteHandler? Called when the Dialogue has no more code left to execute.  "},{"title":"OnLine​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#OnLine","content":"callbacks required &lt;/&gt; Dialogue.OnLine: LineHandler? Called when the Dialogue delivers a line to the game.  "},{"title":"OnNodeComplete​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#OnNodeComplete","content":"callbacks required &lt;/&gt; Dialogue.OnNodeComplete: NodeCompleteHandler? Called when the Dialogue has reached the end of a Node.  "},{"title":"OnNodeStart​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#OnNodeStart","content":"callbacks &lt;/&gt; Dialogue.OnNodeStart: NodeStartHandler? Called when the Dialogue starts executing a Node.  "},{"title":"OnOptions​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#OnOptions","content":"callbacks required &lt;/&gt; Dialogue.OnOptions: OptionsHandler? Called when the Dialogue has options to deliver to the user.  "},{"title":"OnPrepareForLines​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#OnPrepareForLines","content":"callbacks &lt;/&gt; Dialogue.OnPrepareForLines: PrepareForLinesHandler? Called when the Dialogue anticipates that lines will be delivered soon.See for more info.  "},{"title":"CurrentNode​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#CurrentNode","content":"&lt;/&gt; Dialogue.CurrentNode: string? The name of the current Node being executed.  "},{"title":"DefaultStartNodeName​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#DefaultStartNodeName","content":"&lt;/&gt; Dialogue.DefaultStartNodeName: string The node that execution will start from.  "},{"title":"IsActive​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#IsActive","content":"&lt;/&gt; Dialogue.IsActive: boolean A value indicating whether the Dialogue is currently executing Yarn instructions.  "},{"title":"Library​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#Library","content":"&lt;/&gt; Dialogue.Library: Library The &quot;library&quot; of functions this Dialogue's Yarn code has access to.  "},{"title":"Program​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#Program","content":"&lt;/&gt; Dialogue.Program: YarnProgram? The program being executed by this Dialogue.  "},{"title":"VariableStorage​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#VariableStorage","content":"&lt;/&gt; Dialogue.VariableStorage: {[string]: Operand} The dictionary that provides access to the values of variables in use by this Dialogue.  "},{"title":"VirtualMachine​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#VirtualMachine","content":"&lt;/&gt; Dialogue.VirtualMachine: VirtualMachine The underlying virtual machine executing this Dialogue. "},{"title":"Functions​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#new","content":"constructor &lt;/&gt; Dialogue.new( source: YarnProgram?,-- Source program startNode: string?,-- Starting node name noStandardLibrary: boolean?-- Skip registering the standard library functions, only useful for debugging ) → Dialogue-- New dialogue object Create a new Dialogue object with optional source program and starting node.  "},{"title":"AddProgram​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#AddProgram","content":"&lt;/&gt; Dialogue:AddProgram( program: YarnProgram-- The additional Program to load. ) → () Loads the nodes from the specified Program, and adds them to the nodes already loaded. If Dialogue.Program is nil, this method has the same effect as calling Dialogue:SetProgram.  "},{"title":"Continue​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#Continue","content":"&lt;/&gt; Dialogue:Continue() → () Starts or continues execution of the current Program. This method repeatedly executes instructions until one of the following conditions is encountered: The LineHandler or CommandHandler is called. After calling either of these handlers, the Dialogue will wait until Continue() is called. Continue() may be called from inside the LineHandler or CommandHandler, or may be called at any future time. The OptionsHandler is called. When this occurs, the Dialogue is waiting for the user to specify which of the options has been selected, and SetSelectedOption() must be called before Continue() is called again. The Program reaches its end. When this occurs, SetNode() must be called before Continue() is called again. An error occurs while executing the Program. This method has no effect if it is called while the Dialogue is currently in the process of executing instructions.   "},{"title":"ExpandSubstitutions​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#ExpandSubstitutions","content":"&lt;/&gt; Dialogue:ExpandSubstitutions( text: string,-- The text containing substitution markers substitutions: {string}?-- The list of substitutions ) → string-- text, with the content from substitutions inserted. Replaces all substitution markers in a text with the given substitution list. This method replaces substitution markers - for example, {0} - with the corresponding entry in substitutions. If text contains a substitution marker whose index is not present in substitutions, it is ignored. If substitutions is nil, will return the original string unmodified.  "},{"title":"GetExecutionState​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#GetExecutionState","content":"&lt;/&gt; Dialogue:GetExecutionState() → ExecutionState Retrieves the execution state of the Dialogue. This reflects the current action of the virtual machine, whether it is executing instructions, delivering content, or waiting for user interaction.  "},{"title":"GetNodeNames​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#GetNodeNames","content":"&lt;/&gt; Dialogue:GetNodeNames() → {string}-- The names of all loaded nodes Returns a list of all loaded nodes in the program.  "},{"title":"GetTagsForNode​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#GetTagsForNode","content":"&lt;/&gt; Dialogue:GetTagsForNode( nodeName: string-- The name of the node ) → {string}?-- The node's tag, or nil if the node is not present in the Program Returns the tags for the node nodeName. The tags for a node are defined by setting the tags header in the node's source code. This header must be a space-separated list.  "},{"title":"SetProgram​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#SetProgram","content":"&lt;/&gt; Dialogue:SetProgram( program: YarnProgram-- The Program to use ) → () Loads all nodes from the provided Program. This method replaces any existing nodes that have been loaded. If you want to load nodes from an additional Program, use the AddProgram method.  "},{"title":"SetSelectedOption​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#SetSelectedOption","content":"&lt;/&gt; Dialogue:SetSelectedOption( selectedOptionID: number-- Index of an option inside the options table sent by OnOptions ) → () Set the selected dialogue option. caution Calling this method when executionState is not &quot;WaitingOnOptionSelection&quot; will cause an error.  "},{"title":"Stop​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#Stop","content":"&lt;/&gt; Dialogue:Stop() → () Immediately stops the Dialogue. The DialogueCompleteHandler will not be called if the dialogue is ended by calling Stop.  "},{"title":"UnloadAll​","type":1,"pageTitle":"Dialogue","url":"/Silk/api/Dialogue#UnloadAll","content":"&lt;/&gt; Dialogue:UnloadAll() → () Unloads all nodes from the Dialogue. "},{"title":"Stack","type":0,"sectionRef":"#","url":"/Silk/api/Stack","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Stack","url":"/Silk/api/Stack#properties","content":" "},{"title":"items​","type":1,"pageTitle":"Stack","url":"/Silk/api/Stack#items","content":"&lt;/&gt; Stack.items: {Operand} The internal array containing all items on the Stack. "},{"title":"Functions​","type":1,"pageTitle":"Stack","url":"/Silk/api/Stack#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Stack","url":"/Silk/api/Stack#new","content":"constructor &lt;/&gt; Stack.new() → Stack-- The new Stack. Create an empty Stack.  "},{"title":"clear​","type":1,"pageTitle":"Stack","url":"/Silk/api/Stack#clear","content":"&lt;/&gt; Stack:clear() → () Clear the Stack's values.  "},{"title":"peek​","type":1,"pageTitle":"Stack","url":"/Silk/api/Stack#peek","content":"&lt;/&gt; Stack:peek() → Operand-- The value at the top of the Stack. Peek the value at the top of the Stack.  "},{"title":"pop​","type":1,"pageTitle":"Stack","url":"/Silk/api/Stack#pop","content":"&lt;/&gt; Stack:pop() → Operand-- The value popped off the top of the Stack. Pop a value off the top of the Stack. "},{"title":"Errors","type":1,"pageTitle":"Stack","url":"/Silk/api/Stack##","content":"Type\tDescriptionStack underflow\tThe Stack is currently empty, so a value cannot be popped.  "},{"title":"push​","type":1,"pageTitle":"Stack","url":"/Silk/api/Stack#push","content":"&lt;/&gt; Stack:push( value: Operand-- The value to push ) → number-- The new index of the top of the stack Push a value to the top of the Stack. "},{"title":"YarnProgram","type":0,"sectionRef":"#","url":"/Silk/api/YarnProgram","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"YarnProgram","url":"/Silk/api/YarnProgram#types","content":" "},{"title":"Header​","type":1,"pageTitle":"YarnProgram","url":"/Silk/api/YarnProgram#Header","content":"&lt;/&gt; type Header = { key: string, value: string }   "},{"title":"Instruction​","type":1,"pageTitle":"YarnProgram","url":"/Silk/api/YarnProgram#Instruction","content":"&lt;/&gt; type Instruction = { opcode: number, operands: {Operand} }   "},{"title":"Node​","type":1,"pageTitle":"YarnProgram","url":"/Silk/api/YarnProgram#Node","content":"&lt;/&gt; type Node = { name: string, instructions: {Instruction}, labels: {[string]: number}, tags: {string}, sourceTextStringID: string?, headers: {Header} }   "},{"title":"Operand​","type":1,"pageTitle":"YarnProgram","url":"/Silk/api/YarnProgram#Operand","content":"&lt;/&gt; type Operand = string | boolean | number   "},{"title":"StringInfo​","type":1,"pageTitle":"YarnProgram","url":"/Silk/api/YarnProgram#StringInfo","content":"&lt;/&gt; type StringInfo = { text: string, nodeName: string, lineNumber: number, fileName: string, isImplicitTag: boolean, metadata: {string} }   "},{"title":"YarnProgram​","type":1,"pageTitle":"YarnProgram","url":"/Silk/api/YarnProgram#YarnProgram","content":"&lt;/&gt; type YarnProgram = { name: string?, nodes: {Node}, initial_values: {[string]: Operand}, strings: {[string]: StringInfo}, clone: () → YarnProgram }  "},{"title":"Basic Usage","type":0,"sectionRef":"#","url":"/Silk/docs/guide/basics","content":"Basic Usage","keywords":""},{"title":"Commands","type":0,"sectionRef":"#","url":"/Silk/docs/guide/commands","content":"Commands","keywords":""},{"title":"VirtualMachine","type":0,"sectionRef":"#","url":"/Silk/api/VirtualMachine","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"VirtualMachine","url":"/Silk/api/VirtualMachine#types","content":" "},{"title":"ExecutionState​","type":1,"pageTitle":"VirtualMachine","url":"/Silk/api/VirtualMachine#ExecutionState","content":"&lt;/&gt; type ExecutionState = &quot;Stopped&quot; | &quot;WaitingOnOptionSelection&quot; | &quot;WaitingForContinue&quot; | &quot;DeliveringContent&quot; | &quot;Running&quot; The different states the VirtualMachine can be in. &quot;Stopped&quot; - The VirtualMachine is not running a node. &quot;WaitingOnOptionSelection&quot; - The VirtualMachine is waiting on option selection. Call SetSelectedOption before calling Continue &quot;WaitingForContinue&quot; - The VirtualMachine has finished delivering content to the client game, and is waiting for Continue to be called. &quot;DeliveringContent&quot; - The VirtualMachine is delivering a line, options, or a commmand to the client game. &quot;Running&quot; - The VirtualMachine is in the middle of executing code. "},{"title":"Properties​","type":1,"pageTitle":"VirtualMachine","url":"/Silk/api/VirtualMachine#properties","content":" "},{"title":"CurrentNode​","type":1,"pageTitle":"VirtualMachine","url":"/Silk/api/VirtualMachine#CurrentNode","content":"&lt;/&gt; VirtualMachine.CurrentNode: Node? The current node the VirtualMachine is executing.  "},{"title":"CurrentNodeName​","type":1,"pageTitle":"VirtualMachine","url":"/Silk/api/VirtualMachine#CurrentNodeName","content":"&lt;/&gt; VirtualMachine.CurrentNodeName: string? The name of the current node the VirtualMachine is executing.  "},{"title":"CurrentOptions​","type":1,"pageTitle":"VirtualMachine","url":"/Silk/api/VirtualMachine#CurrentOptions","content":"&lt;/&gt; VirtualMachine.CurrentOptions: {Option} The current options the VirtualMachine has encountered.  "},{"title":"Dialogue​","type":1,"pageTitle":"VirtualMachine","url":"/Silk/api/VirtualMachine#Dialogue","content":"&lt;/&gt; VirtualMachine.Dialogue: Dialogue The parent Dialogue for this VirtualMachine.  "},{"title":"ExecutionState​","type":1,"pageTitle":"VirtualMachine","url":"/Silk/api/VirtualMachine#ExecutionState","content":"&lt;/&gt; VirtualMachine.ExecutionState: ExecutionState The VirtualMachine's current execution state. See the docs for ExecutionState for more info.  "},{"title":"ProgramCounter​","type":1,"pageTitle":"VirtualMachine","url":"/Silk/api/VirtualMachine#ProgramCounter","content":"&lt;/&gt; VirtualMachine.ProgramCounter: number The index of the instruction being or to be executed by the VirtualMachine.  "},{"title":"Stack​","type":1,"pageTitle":"VirtualMachine","url":"/Silk/api/VirtualMachine#Stack","content":"&lt;/&gt; VirtualMachine.Stack: Stack The VirtualMachine's stack, used for storing values during node execution. "},{"title":"Functions​","type":1,"pageTitle":"VirtualMachine","url":"/Silk/api/VirtualMachine#functions","content":" "},{"title":"new​","type":1,"pageTitle":"VirtualMachine","url":"/Silk/api/VirtualMachine#new","content":"constructor &lt;/&gt; VirtualMachine.new(dialogue: DialogueTypes.Dialogue) → VirtualMachine-- The new VirtualMachine Create a new VirtualMachine with parent Dialogue. The VirtualMachine will not have its current node set. By default, it will use the DefaultStartNodeName property of the parent Dialogue.  "},{"title":"CheckCanContinue​","type":1,"pageTitle":"VirtualMachine","url":"/Silk/api/VirtualMachine#CheckCanContinue","content":"&lt;/&gt; VirtualMachine:CheckCanContinue() → () Runs a series of tests to see if the VirtualMachine is in a state where Continue can be called. Errors if it can't.  "},{"title":"Continue​","type":1,"pageTitle":"VirtualMachine","url":"/Silk/api/VirtualMachine#Continue","content":"&lt;/&gt; VirtualMachine:Continue() → () Resumes execution. Calls CheckCanContinue internally.  "},{"title":"ResetState​","type":1,"pageTitle":"VirtualMachine","url":"/Silk/api/VirtualMachine#ResetState","content":"&lt;/&gt; VirtualMachine:ResetState() → () Reset the VirtualMachine's internal state. This method resets the current node, program counter, options, and stack.  "},{"title":"SetNode​","type":1,"pageTitle":"VirtualMachine","url":"/Silk/api/VirtualMachine#SetNode","content":"&lt;/&gt; VirtualMachine:SetNode( nodeName: string-- Name of the node to load ) → () Sets the node for the VirtualMachine to run. This method will call ResetState and invoke the PrepareForLinesHandler in the parent Dialogue. "},{"title":"Functions","type":0,"sectionRef":"#","url":"/Silk/docs/guide/functions","content":"Functions","keywords":""},{"title":"Getting started","type":0,"sectionRef":"#","url":"/Silk/docs/intro","content":"","keywords":""},{"title":"About​","type":1,"pageTitle":"Getting started","url":"/Silk/docs/intro#about","content":"Yarn Spinner is a lightweight scripting language created by Secret Lab that makes it easier to build branching narrative and dialogue in games. Silk is a bridge between Yarn and Roblox that allows you to write dialogue for your experience in Yarn. "},{"title":"Installing​","type":1,"pageTitle":"Getting started","url":"/Silk/docs/intro#installing","content":"To use Silk, you will need to install two things: The CLI, which compiles and packs your Yarn scripts into ModuleScripts for use in RobloxThe runtime, which executes those compiled ModuleScripts in your experience "},{"title":"Aftman/Wally (Recommended)​","type":1,"pageTitle":"Getting started","url":"/Silk/docs/intro#aftmanwally-recommended","content":"info Silk was created with an Aftman/Rojo workflow in mind. You can install the latest version of the CLI with Aftman by running the following command: aftman install ceast64/Silk  Then, you can install the runtime with the Wally package manager by adding it to your wally.toml file: [dependencies] Silk = &quot;ceast64/silk@x.x.x&quot; # replace x.x.x with latest version  "},{"title":"Manual​","type":1,"pageTitle":"Getting started","url":"/Silk/docs/intro#manual","content":"You can also manually download and install the runtime and CLI from the latest release. Download the correct build of the CLI and extract it somewhere within your PATH, and add the runtime to Studio or your local project. "},{"title":"Unstable releases​","type":1,"pageTitle":"Getting started","url":"/Silk/docs/intro#unstable-releases","content":"Some features are unfinished or need more testing before they can be released. You can download unstable builds of the CLI and runtime from their respective GitHub workflows. CLI buildsRuntime builds "},{"title":"Project setup​","type":1,"pageTitle":"Getting started","url":"/Silk/docs/intro#project-setup","content":"Different projects have different file structures, but this setup should be able to be adapted to most project's needs. "},{"title":"1. Create a directory in your project for Yarn scripts​","type":1,"pageTitle":"Getting started","url":"/Silk/docs/intro#1-create-a-directory-in-your-project-for-yarn-scripts","content":"This directory will contain the Yarn scripts you'll use in your project. info Keep note of this directory's path in your project, as it will be used when we create the script to compile all of the scripts. "},{"title":"2. Create an output directory for compiled scripts​","type":1,"pageTitle":"Getting started","url":"/Silk/docs/intro#2-create-an-output-directory-for-compiled-scripts","content":"If you are using Git, add this directory to your .gitignore file. When you use the CLI to compile your Yarn scripts, they will be outputted here as .lua files where they can be used with Rojo or any other tools. If you are using Rojo in your project, be sure to add this directory to your .project.json file(s) so that your scripts sync properly. "},{"title":"3. Compiling Yarn programs​","type":1,"pageTitle":"Getting started","url":"/Silk/docs/intro#3-compiling-yarn-programs","content":"To start, running silk --help will output a description of each CLI option. To compile your scripts, run the following: silk -i &lt;yarn script directory&gt; -o &lt;output directory&gt; -r &lt;path to runtime in Roblox&gt;  See breakdown of the options in the CLI below. Option\tDescription-i, --input\tThe directory containing Yarn scripts to compile. -o, --output\tThe output directory for the processed ModuleScripts. -r, --runtimePath\tThe path to the Silk runtime in your experience. Example: &quot;game.ReplicatedStorage.Silk&quot; info If your project has a build script or CI workflow, be sure to run the Silk CLI as a part of it so your dialogue works properly. "},{"title":"4. Setting up your editor for writing Yarn scripts​","type":1,"pageTitle":"Getting started","url":"/Silk/docs/intro#4-setting-up-your-editor-for-writing-yarn-scripts","content":"You can install the official Yarn Spinner extension for Visual Studio Code to get highlighting and autocompletion in your Yarn scripts. When using this extension, you can define your custom commands and functions in a JSON file ending with .ysls.json in the root of your project. The schema is not fully documented, but an example configuration can be observed here. You can learn more about the extension from Yarn Spinner's official documentation. "},{"title":"What's next?​","type":1,"pageTitle":"Getting started","url":"/Silk/docs/intro#whats-next","content":"Your project is now set up to use Yarn scripts! To learn more about using Silk's dialogue runtime, read the usage guide. To learn more about writing in Yarn, visit docs.yarnspinner.dev. "}]